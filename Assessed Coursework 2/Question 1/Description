
Matrices arising from the discretisation of partial differential equations using, for example, finite
element or finite difference methods, are generally sparse in the sense that they have many
more zero entries than nonzero ones. A commonly employed sparse matrix storage format is
the Compressed Sparse Row (CSR) format. Here, the nonzero entries of an n × n matrix are
stored in a vector matrix_entries, the vector column_no gives the column position of the
corresponding entries in matrix_entries, while the vector row_start of length n + 1 is the
list of indices which indicates where each row starts in matrix_entries. For example, consider
the following
A =(
8 0 0 2
0 3 0 1
0 0 4 0
2 1 0 7
)
−→
matrix_entries = 8 2 3 1 4 2 1 7
column_no = 1 4 2 4 3 1 2 4
row_start = 1 3 5 6 9

(a) In a file sp_matrix_multiply.cpp write a C++ function called sp_matrix_multiply
which computes the product of an n × n matrix A stored in CSR format and a vector x.
The function should take matrix_entries, column_no, row_start (for A), x and n as
input and return as output the product Ax.

(b) Setting the vector x = (6, 8, 2, 5)>, write a test program called q1b.cpp to compute the
product Ax, where A is the matrix given above. Note that all arrays should be dynamically
allocated and deleted after use.
